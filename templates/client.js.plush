// Code generated by oto; DO NOT EDIT.

'use strict';

<%= for (service) in def.Services { %> 
<%= format_comment_text(service.Comment) %>export class <%= service.Name %> {
	<%= for (method) in service.Methods { %>
	<%= format_comment_text(method.Comment) %>	async <%= camelize_down(method.Name) %>(<%= camelize_down(method.InputObject.TypeName) %>) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		<%= camelize_down(method.InputObject.TypeName) %> = <%= camelize_down(method.InputObject.TypeName) %> || {}
		const response = await fetch('<%= params["backend_scheme"] %>://<%= params["backend_host"] %><%= if (params["backend_port"] != "") {%>:<%= params["backend_port"] %><% } %><%= params["backend_path"] %><%= service.Name %>.<%= method.Name %>', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(<%= camelize_down(method.InputObject.TypeName) %>)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	<% } %>
}
<% } %>
